package acs

context Person
  inv P15: self.aut->includes(self.sit)

context Building
  inv gate_def: self.gate = self.org_dom.dest

context Building
  inv P7: not (self.gate-> includes(self)) 

context Person
  inv P10: self.aut->forAll(b|self.aut.building->includes(b))

context Person::admitted(q: Door): ecore::EBoolean
  post P17: q.org = self.sit and
            self.aut->includes(q.dest) and
            self.dap_dom->isEmpty()
 
context Person
  inv P12: Person.allInstances()->forAll(p1, p2 | p1.dap_dom->notEmpty() and p1.dap_dom= p2.dap_dom implies p1= p2)

context Person
  inv P13a: self.sit->includes(self.dap_dom.org)

context Person
  inv P13b: self.aut-> includes(self.dap_dom.dest)

context Door
  inv P14_green: self.green = self.dap->notEmpty()

context Door::accept(p: Person):
  pre accept_pre1: not (green or red)
  pre accept_pre2: p.admitted(self)
  post accept_post: self.dap = p and p.dap_dom= self


context Door::pass_thru():
  pre pass_pre:  self.green
  post pass_post:
     self.dap@pre.sit = self.dest and
     self.dap@pre.dap_dom->isEmpty() and
     self.dap->isEmpty() -- implies not (self.green)
      
context Door::off_grn():
  pre off_grn_pre:  self.green
  post off_grn_post:
     self.dap@pre.dap_dom->isEmpty() and
     self.dap->isEmpty()

-- Not mentioned explicitly: 
-- If a door is not accepted for a certain person, it is refused.
context Door::refuse(p: Person):
  pre refuse_pre_1: not (green or red)
  pre refuse_pre_2: not (p.admitted(self))
  post refuse_post: self.red

-- P15: The red light of a door whose access has just been refused stays on
-- for a period of 2 seconds, the door stays blocked of course.
context Door::off_red():
  post off_red_post: self.red = false

endpackage